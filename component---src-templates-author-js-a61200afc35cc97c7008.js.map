{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/author.js"],"names":["Bio","author","postWriter","data","slug","name","twitter","drupal","authors","bio","site","siteMetadata","blogWriter","social","style","display","marginBottom","rhythm","to","minWidth","minHeight","marginRight","overflow","boxShadow","alt","width","height","borderRadius","src","target","rel","href","pageQuery","AuthorView","location","pageContext","title"],"mappings":"gLAkGeA,IApFH,SAAC,GAA+B,IAAD,IAA7BC,OAAQC,OAAqB,MAAR,GAAQ,EACnCC,EAAI,OAaNF,EAAS,CACXG,KAAM,GACNC,KAAM,GACNC,QAAS,GACZC,OAAQ,IAEP,GAAIC,IAAQN,GACVD,EAAOI,KAAOG,IAAQN,GAAYG,KAClCJ,EAAOG,KAAOF,EACdD,EAAOK,QAAUE,IAAQN,GAAYI,QACxCL,EAAOM,OAASC,IAAQN,GAAYK,OACjCN,EAAOQ,IAAMD,IAAQN,GAAYO,QAC5B,CAAC,IAAD,EACkCN,EAAKO,KAAKC,aAAjCC,EADX,EACGX,OAAoBY,EADvB,EACuBA,OAC5BZ,EAAOI,KAAOO,EACdX,EAAOG,KAAO,OACdH,EAAOK,QAAUO,EAAOP,QAC3BL,EAAOM,OAASM,EAAON,OAGtB,OACE,yBACEO,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,GAAE,WAAajB,EAAOG,KACtBU,MAAO,CACLK,SAAU,GACVC,UAAW,GACXC,YAAaJ,YAAO,IACpBD,aAAc,EACdM,SAAS,SACTC,UAAW,SAGb,yBACEC,IAAKvB,EAAOI,KACZS,MAAO,CACLW,MAAO,GACPC,OAAO,OACPC,aAAa,QAEfC,IAAG,IAAM3B,EAAOG,KAAb,UAGP,2BACE,gCAASH,EAAOI,MADlB,IACkCJ,EAAOQ,IADzC,IAEE,6BAEGR,EAAOK,SAA8B,KAAnBL,EAAOK,QACzB,uBAAGuB,OAAO,SAASC,IAAI,sBAAsBC,KAAI,uBAAyB9B,EAAOK,SAAjF,IACGL,EAAOK,SAEX,KAGCL,EAAOM,QAA4B,KAAlBN,EAAOM,OACxB,iDAAsB,uBAAGsB,OAAO,SAASC,IAAI,sBAAsBC,KAAI,wBAA0B9B,EAAOM,QACpGN,EAAOM,SAEZ,S,6MC3FV,0HAoBayB,EAAS,aA0BPC,UAtCI,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,YAAahC,EAAW,EAAXA,KACnCF,EAAWkC,EAAXlC,OACFmC,EAAK,aAAgBnC,EAAhB,IACX,OACE,kBAAC,IAAD,CAAQiC,SAAUA,EAAUE,MAAOA,GACjC,kBAAC,IAAD,CAAKA,MAAOA,IACZ,kBAAC,IAAD,CAAKnC,OAAQA,IACb,kBAAC,IAAD,CAAME,KAAMA","file":"component---src-templates-author-js-a61200afc35cc97c7008.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\nimport { rhythm } from \"../utils/typography\"\n\nimport { authors } from \"../globals\"\n\nconst Bio = ({author: postWriter = ''}) => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  let author = {\n    slug: '',\n    name: '',\n    twitter: '',\n\tdrupal: ''\n  };\n  if (authors[postWriter]) {\n    author.name = authors[postWriter].name;\n    author.slug = postWriter;\n    author.twitter = authors[postWriter].twitter;\n\tauthor.drupal = authors[postWriter].drupal;\n    author.bio = authors[postWriter].bio;\n  } else {\n    const { author: blogWriter, social } = data.site.siteMetadata;\n    author.name = blogWriter;\n    author.slug = 'abhi';\n    author.twitter = social.twitter;\n\tauthor.drupal = social.drupal;\n  }\n\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Link\n        to={`/author/${author.slug}`}\n        style={{\n          minWidth: 50,\n          minHeight: 50,\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          overflow: `hidden`,\n          boxShadow: 'none'\n        }}\n      >\n        <img\n          alt={author.name}\n          style={{\n            width: 50,\n            height: `auto`,\n            borderRadius: `100%`,\n          }}\n          src={`/${author.slug}.jpg`}\n        />\n      </Link>\n      <p>\n        <strong>{author.name}</strong> {author.bio}.\n        <br/> \n        {\n          (author.twitter && author.twitter !== \"\") ?\n          (<a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://twitter.com/${author.twitter}`}>\n            @{author.twitter}\n          </a>):\n          null\n\t\t    }\n        {\n          (author.drupal && author.drupal !== \"\") ?\n          (<div> Drupal Profile: <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://drupal.org/u/${author.drupal}`}>\n              {author.drupal}</a>\n          </div>):\n          null\n        }\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Bio from \"../components/bio\"\nimport List from \"../templates/blog-list\"\n\nconst AuthorView = ({ location, pageContext, data }) => {\n  const { author } = pageContext\n  const title = `Blogs by \"${author}\"`;\n  return (\n    <Layout location={location} title={title}>\n      <SEO title={title} />\n      <Bio author={author} />\n      <List data={data} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query AuthorPage($author: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { author: { eq: $author } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default AuthorView;\n"],"sourceRoot":""}